__author__ = "Leanne Whitmore"
__email__ = "leanne382@gmail.com"
__description__ = "quantify pathogen copies"

import os
import re
import glob
import pandas as pd
from spq.map_reads import map_reads as mr
import spq.extra_functions as ef

def read_FASTA(filename):
    begin = True
    prots = {}
    fil = open(filename, "rt")
    lins = fil.readlines()
    fil.close()
    filtered_lines=[]
    for line in lins:
        if line.startswith("\n"):
            pass
        else:
            filtered_lines.append(line)

    for lin in filtered_lines:
        slin = lin.strip()        
        if slin[0] == '>':
            if begin == False:
                prots[pname] = seq
            seq = ""
            pname = slin[1:].strip()
            begin = False
        else:
            seq = seq + slin
    prots[pname] = seq
    return prots

def _generate_pathogen_gtf(args):
    files_genome = mr._get_genome_file(args)
    seq = read_FASTA(files_genome[0])
    virus=[]
    with open(os.path.join(args.output_path, "_tmp", "pathogen_copy.gtf"), "w") as fin:
        fin.write("#!patho-copy gtf generated by scPathoQuant\n")
        for gene_name, v in seq.items():
            fin.write(gene_name+"\t"+"scPathoQuant\tgene\t"+str(1)+"\t"+str(len(v))+"\t.\t+\t.\t"+"gene_id "+"\""+gene_name+"\"; gene version \"2\"; gene_name \""+gene_name+"\"; gene_source \"scPathoQuant\"; gene_biotype \"protein_coding\"\n")
            fin.write(gene_name+"\t"+"scPathoQuant\ttranscript\t"+str(1)+"\t"+str(len(v))+"\t.\t+\t.\t"+"gene_id "+"\""+gene_name+"\"; gene version \"2\"; transcript_id \""+gene_name+"_transcript\"; transcript_version \"1\"; gene_name \""+gene_name+"\"; gene_source \"scPathoQuant\"; gene_biotype \"protein_coding\"; transcript_name \""+gene_name+"\"; transcript_source \"scPathoQuant\"; trnascript_biotype \"protein_coding\"\n")
            fin.write(gene_name+"\t"+"scPathoQuant\texon\t"+str(1)+"\t"+str(len(v))+"\t.\t+\t.\t"+"gene_id "+"\""+gene_name+"\"; gene version \"2\"; transcript_id \""+gene_name+"_transcript\"; transcript_version \"1\"; exon_number \"1\"; gene_name \""+gene_name+"\"; gene_source \"scPathoQuant\"; gene_biotype \"protein_coding\"; transcript_name \""+gene_name+"\"; transcript_source \"scPathoQuant\"; trnascript_biotype \"protein_coding\"; exon_id \""+gene_name+"_exon\"; exon_version \"1\"\n")
            virus.append(gene_name) 
    return(virus)

def quantify_reads(output_path,filename, virus_names, csvfilesoutput):

    print ("STATUS: quantifying pathgen copies ...")
    ## -- get reads mapping to full pathogen
    reads_mapping = dict()
    for virus_name in virus_names:
        tmp =set()
        with open(filename, 'r') as fin:
            for line in fin:
                larray = line.strip().split("\t")
                if larray[-1] =="XF:Z:"+virus_name:
                    tmp.add(larray[0])
        reads_mapping[virus_name]=tmp

    ## -- get umi and cell barcode information 
    dfumiall = dict()
    df = pd.read_csv(os.path.join(output_path,"_tmp", "barcode_umi_read_table.csv"))
    for k, t in reads_mapping.items():
        krename = re.sub("\/", "_",k )
        krename = re.sub(" ", "_",krename )
        df1 = df[df['read'].isin(t)]
        df_reads = df1.groupby(['cell_barcode', 'umi']).count()
        if csvfilesoutput=="True":
            df_reads.to_csv(os.path.join(output_path, "pathogen_al_umi_read_counts_"+krename+".csv"))
        df_reads = df_reads.reset_index()
        df_umi = df_reads[["cell_barcode", "umi"]].groupby(["cell_barcode"]).count()
        if csvfilesoutput=="True":
            df_umi.to_csv(os.path.join(output_path, "pathogen_al_counts_"+krename+".csv"))
        dfumiall[k]=  df_umi
    return(dfumiall)

def htseq_run(args):
    ## -- generate gtf for pathogen copies

    virus_names = _generate_pathogen_gtf(args)
    arg=["htseq-count", "--format=bam", "--mode=intersection-nonempty", "--idattr=gene_id", os.path.join(args.output_path, "pathogen_al_mapped_sort.bam"),
         os.path.join(args.output_path,"_tmp","pathogen_copy.gtf"), "--samout="+os.path.join(args.output_path,"pathogen_al_sort_counts.sam")]
    ef._run_subprocesses(arg, "STATUS: running htseq for pathogen copies ", "running htseq for pathogen copies")

    dfumi = quantify_reads(args.output_path, os.path.join(args.output_path, "pathogen_al_sort_counts.sam"), virus_names, args.csvfilesoutput)
    return dfumi, virus_names
